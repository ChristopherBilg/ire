use num::{Integer, One};
use num::bigint::BigUint;

pub trait ModPow {
    fn modpow(&self, exponent: &Self, modulus: &Self) -> Self;
}

impl ModPow for BigUint {
    fn modpow(&self, exponent: &Self, modulus: &Self) -> Self {
        let mut acc = self.clone();
        let mut res = BigUint::one();
        let mut exp = exponent.clone();

        while exp > BigUint::one() {
            if exp.is_even() {
                exp = exp / 2u8;
            } else {
                res = (res * &acc) % modulus;
                exp = (exp - 1u8) / 2u8;
            }
            acc = (&acc * &acc) % modulus;
        }
        (res * acc) % modulus
    }
}

pub fn rectify(bi: &BigUint, len: usize) -> Vec<u8> {
    let mut b = bi.to_bytes_be();
    // Pad with 0s if necessary
    match b.len() {
        sz if sz == len => b,
        sz if sz > (len + 1) => panic!("key too big ({}) max is {}", sz, len + 1),
        0 => {
            println!("Warning: dh_pub is zero!");
            vec![0u8; len]
        }
        sz if sz > len => {
            match b[0] {
                0 => Vec::from(&b[1..]),
                _ => panic!("key too big ({}) max is {}", sz, len),
            }
        }
        _ => {
            match b[0] & 0x80 {
                0 => {
                    // Smaller than needed
                    let mut ret = vec![0u8; len];
                    ret.truncate(len - b.len());
                    ret.append(&mut b);
                    ret
                }
                _ => panic!("negative"),
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use num::bigint::ToBigUint;

    use super::*;

    #[test]
    fn modpow_small() {
        let b = 3.to_biguint().unwrap();
        let e = 7.to_biguint().unwrap();
        let m = 11.to_biguint().unwrap();
        let r = 9.to_biguint().unwrap();

        assert_eq!(b.modpow(&e, &m), r);
    }

    #[test]
    fn modpow_big() {
        let b =
            BigUint::from_bytes_be(&[0xef, 0xac, 0x3c, 0x0a, 0x0d, 0xe5, 0x55, 0x51, 0xfe, 0xe0,
                                     0xbf, 0xe4, 0x67, 0xfa, 0x01, 0x7a, 0x1a, 0x89, 0x8f, 0xa1,
                                     0x6c, 0xa5, 0x7c, 0xb1, 0xca, 0x9e, 0x32, 0x48, 0xca, 0xcc,
                                     0x09, 0xa9, 0xb9, 0x9d, 0x6a, 0xbc, 0x38, 0x41, 0x8d, 0x0f,
                                     0x82, 0xae, 0x42, 0x38, 0xd9, 0xa6, 0x88, 0x32, 0xaa, 0xde,
                                     0xc7, 0xc1, 0xac, 0x5f, 0xed, 0x48, 0x7a, 0x56, 0xa7, 0x1b,
                                     0x67, 0xac, 0x59, 0xd5, 0xaf, 0xb2, 0x80, 0x22, 0x20, 0xd9,
                                     0x59, 0x2d, 0x24, 0x7c, 0x4e, 0xfc, 0xab, 0xbd, 0x9b, 0x75,
                                     0x58, 0x60, 0x88, 0xee, 0x1d, 0xc0, 0x0d, 0xc4, 0x23, 0x2a,
                                     0x8e, 0x15, 0x6e, 0x81, 0x91, 0xdd, 0x67, 0x5b, 0x6a, 0xe0,
                                     0xc8, 0x0f, 0x51, 0x64, 0x75, 0x29, 0x40, 0xbc, 0x28, 0x4b,
                                     0x7c, 0xee, 0x88, 0x5c, 0x1e, 0x10, 0xe4, 0x95, 0x34, 0x5b,
                                     0x8f, 0xbe, 0x9c, 0xfd, 0xe5, 0x23, 0x3f, 0xe1, 0x19, 0x45,
                                     0x9d, 0x0b, 0xd6, 0x4b, 0xe5, 0x3c, 0x27, 0xde, 0x5a, 0x02,
                                     0xa8, 0x29, 0x97, 0x6b, 0x33, 0x09, 0x68, 0x62, 0x82, 0xda,
                                     0xd2, 0x91, 0xbd, 0x38, 0xb6, 0xa9, 0xbe, 0x39, 0x66, 0x46,
                                     0xdd, 0xaf, 0x80, 0x39, 0xa2, 0x57, 0x3c, 0x39, 0x1b, 0x14,
                                     0xe8, 0xbc, 0x2c, 0xb5, 0x3e, 0x48, 0x29, 0x8c, 0x04, 0x7e,
                                     0xd9, 0x87, 0x9e, 0x9c, 0x5a, 0x52, 0x10, 0x76, 0xf0, 0xe2,
                                     0x7d, 0xf3, 0x99, 0x0e, 0x16, 0x59, 0xd3, 0xd8, 0x20, 0x5b,
                                     0x64, 0x43, 0xeb, 0xc0, 0x99, 0x18, 0xeb, 0xee, 0x67, 0x64,
                                     0xf6, 0x68, 0x9f, 0x2b, 0x2b, 0xe3, 0xb5, 0x9c, 0xbc, 0x76,
                                     0xd7, 0x6d, 0x0d, 0xfc, 0xd7, 0x37, 0xc3, 0xec, 0x0c, 0xcf,
                                     0x9c, 0x00, 0xad, 0x05, 0x54, 0xbf, 0x17, 0xe7, 0x76, 0xad,
                                     0xb4, 0xed, 0xf9, 0xcc, 0x6c, 0xe5, 0x40, 0xbe, 0x76, 0x22,
                                     0x90, 0x93, 0x5c, 0x53, 0x89, 0x3b]);
        let e =
            BigUint::from_bytes_be(&[0xbe, 0x0e, 0x6e, 0xa6, 0x08, 0x74, 0x61, 0x33, 0xe0, 0xfb,
                                     0xc1, 0xbf, 0x82, 0xdb, 0xa9, 0x1e, 0xe2, 0xb5, 0x62, 0x31,
                                     0xa8, 0x18, 0x88, 0xd2, 0xa8, 0x33, 0xa1, 0xfc, 0xf7, 0xff,
                                     0x00, 0x2a, 0x3c, 0x48, 0x6a, 0x13, 0x4f, 0x42, 0x0b, 0xf3,
                                     0xa5, 0x43, 0x5b, 0xe9, 0x1a, 0x5c, 0x83, 0x91, 0x77, 0x4d,
                                     0x6e, 0x6c, 0x08, 0x5d, 0x83, 0x57, 0xb0, 0xc9, 0x7d, 0x4d,
                                     0x2b, 0xb3, 0x3f, 0x7c, 0x34, 0xc6, 0x80, 0x59, 0xf7, 0x8d,
                                     0x25, 0x41, 0xea, 0xcc, 0x88, 0x32, 0x42, 0x6f, 0x18, 0x16,
                                     0xd3, 0xbe, 0x00, 0x1e, 0xb6, 0x9f, 0x92, 0x42, 0x51, 0xc7,
                                     0x70, 0x8e, 0xe1, 0x0e, 0xfe, 0x98, 0x44, 0x9c, 0x9a, 0x4a,
                                     0xb5, 0x5a, 0x0f, 0x23, 0x9d, 0x79, 0x74, 0x10, 0x51, 0x5d,
                                     0xa0, 0x0d, 0x3e, 0xa0, 0x79, 0x70, 0x44, 0x78, 0xa2, 0xca,
                                     0xc3, 0xd5, 0x04, 0x3c, 0xbd, 0x9b, 0xe1, 0xb4, 0x6d, 0xce,
                                     0x47, 0x9d, 0x43, 0x02, 0xd3, 0x44, 0x84, 0xa9, 0x39, 0xe6,
                                     0x0a, 0xb5, 0xad, 0xa7, 0x12, 0xae, 0x34, 0xb2, 0x30, 0xcc,
                                     0x47, 0x3c, 0x9f, 0x8e, 0xe6, 0x9d, 0x2c, 0xac, 0x59, 0x70,
                                     0x29, 0xf5, 0xbf, 0x18, 0xbc, 0x82, 0x03, 0xe4, 0xf3, 0xe8,
                                     0x95, 0xa2, 0x13, 0xc9, 0x4f, 0x1e, 0x24, 0xc7, 0x3d, 0x77,
                                     0xe5, 0x17, 0xe8, 0x01, 0x53, 0x66, 0x1f, 0xdd, 0xa2, 0xce,
                                     0x9e, 0x47, 0xa7, 0x3d, 0xd7, 0xf8, 0x2f, 0x2a, 0xdb, 0x1e,
                                     0x3f, 0x13, 0x6b, 0xf7, 0x8a, 0xe5, 0xf3, 0xb8, 0x08, 0x73,
                                     0x0d, 0xe1, 0xa4, 0xef, 0xf6, 0x78, 0xe7, 0x7a, 0x06, 0xd0,
                                     0x19, 0xa5, 0x22, 0xeb, 0xcb, 0xef, 0xba, 0x2a, 0x9c, 0xaf,
                                     0x77, 0x36, 0xb1, 0x57, 0xc5, 0xc6, 0x2d, 0x19, 0x25, 0x91,
                                     0x17, 0x94, 0x68, 0x50, 0x2d, 0xdb, 0x18, 0x22, 0x11, 0x7b,
                                     0x68, 0xa0, 0x32, 0xf7, 0xdb, 0x88]);
        let m =
            BigUint::from_bytes_be(&[0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f,
                                     0xda, 0xa2, 0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,
                                     0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08, 0x8a, 0x67,
                                     0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6, 0x3b, 0x13, 0x9b, 0x22,
                                     0x51, 0x4a, 0x08, 0x79, 0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95,
                                     0x19, 0xb3, 0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,
                                     0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d, 0x6d, 0x51,
                                     0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76, 0x62, 0x5e, 0x7e, 0xc6,
                                     0xf4, 0x4c, 0x42, 0xe9, 0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff,
                                     0x5c, 0xb6, 0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,
                                     0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11, 0x7c, 0x4b,
                                     0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51, 0xec, 0xe4, 0x5b, 0x3d,
                                     0xc2, 0x00, 0x7c, 0xb8, 0xa1, 0x63, 0xbf, 0x05, 0x98, 0xda,
                                     0x48, 0x36, 0x1c, 0x55, 0xd3, 0x9a, 0x69, 0x16, 0x3f, 0xa8,
                                     0xfd, 0x24, 0xcf, 0x5f, 0x83, 0x65, 0x5d, 0x23, 0xdc, 0xa3,
                                     0xad, 0x96, 0x1c, 0x62, 0xf3, 0x56, 0x20, 0x85, 0x52, 0xbb,
                                     0x9e, 0xd5, 0x29, 0x07, 0x70, 0x96, 0x96, 0x6d, 0x67, 0x0c,
                                     0x35, 0x4e, 0x4a, 0xbc, 0x98, 0x04, 0xf1, 0x74, 0x6c, 0x08,
                                     0xca, 0x18, 0x21, 0x7c, 0x32, 0x90, 0x5e, 0x46, 0x2e, 0x36,
                                     0xce, 0x3b, 0xe3, 0x9e, 0x77, 0x2c, 0x18, 0x0e, 0x86, 0x03,
                                     0x9b, 0x27, 0x83, 0xa2, 0xec, 0x07, 0xa2, 0x8f, 0xb5, 0xc5,
                                     0x5d, 0xf0, 0x6f, 0x4c, 0x52, 0xc9, 0xde, 0x2b, 0xcb, 0xf6,
                                     0x95, 0x58, 0x17, 0x18, 0x39, 0x95, 0x49, 0x7c, 0xea, 0x95,
                                     0x6a, 0xe5, 0x15, 0xd2, 0x26, 0x18, 0x98, 0xfa, 0x05, 0x10,
                                     0x15, 0x72, 0x8e, 0x5a, 0x8a, 0xac, 0xaa, 0x68, 0xff, 0xff,
                                     0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);
        let r =
            BigUint::from_bytes_be(&[0x00, 0xa1, 0x46, 0x83, 0x11, 0x6e, 0x56, 0xed, 0xc9, 0x7a,
                                     0x98, 0x22, 0x8b, 0x5e, 0x92, 0x47, 0x76, 0x0d, 0xd7, 0x83,
                                     0x6e, 0xca, 0xab, 0xac, 0x13, 0xed, 0xa5, 0x37, 0x3b, 0x47,
                                     0x52, 0xaa, 0x65, 0xa1, 0x45, 0x48, 0x50, 0x40, 0xdc, 0x77,
                                     0x0e, 0x30, 0xaa, 0x86, 0x75, 0x6b, 0xe7, 0xd3, 0xa8, 0x9d,
                                     0x30, 0x85, 0xe4, 0xda, 0x51, 0x55, 0xcf, 0xb4, 0x51, 0xef,
                                     0x62, 0x54, 0xd0, 0xda, 0x61, 0xcf, 0x2b, 0x2c, 0x87, 0xf4,
                                     0x95, 0xe0, 0x96, 0x05, 0x53, 0x09, 0xf7, 0x77, 0x80, 0x2b,
                                     0xbb, 0x37, 0x27, 0x1b, 0xa8, 0x13, 0x13, 0xf1, 0xb5, 0x07,
                                     0x5c, 0x75, 0xd1, 0x02, 0x4b, 0x6c, 0x77, 0xfd, 0xb5, 0x6f,
                                     0x17, 0xb0, 0x5b, 0xce, 0x61, 0xe5, 0x27, 0xeb, 0xfd, 0x2e,
                                     0xe8, 0x68, 0x60, 0xe9, 0x90, 0x70, 0x66, 0xed, 0xd5, 0x26,
                                     0xe7, 0x93, 0xd2, 0x89, 0xbf, 0x67, 0x26, 0xb2, 0x93, 0x41,
                                     0xb0, 0xde, 0x24, 0xef, 0xf8, 0x24, 0x24, 0x8d, 0xfd, 0x37,
                                     0x4b, 0x4e, 0xc5, 0x95, 0x42, 0x35, 0xce, 0xd2, 0xb2, 0x6b,
                                     0x19, 0x5c, 0x90, 0x10, 0x04, 0x2f, 0xfb, 0x8f, 0x58, 0xce,
                                     0x21, 0xbc, 0x10, 0xec, 0x42, 0x64, 0xfd, 0xa7, 0x79, 0xd3,
                                     0x52, 0xd2, 0x34, 0x3d, 0x4e, 0xae, 0xa6, 0xa8, 0x61, 0x11,
                                     0xad, 0xa3, 0x7e, 0x95, 0x55, 0x43, 0xca, 0x78, 0xce, 0x28,
                                     0x85, 0xbe, 0xd7, 0x5a, 0x30, 0xd1, 0x82, 0xf1, 0xcf, 0x68,
                                     0x34, 0xdc, 0x5b, 0x6e, 0x27, 0x1a, 0x41, 0xac, 0x34, 0xa2,
                                     0xe9, 0x1e, 0x11, 0x33, 0x36, 0x3f, 0xf0, 0xf8, 0x8a, 0x7b,
                                     0x04, 0x90, 0x02, 0x27, 0xc9, 0xf6, 0xe6, 0xd0, 0x6b, 0x78,
                                     0x56, 0xb4, 0xbb, 0x4e, 0x35, 0x4d, 0x61, 0x06, 0x0d, 0xb6,
                                     0xc8, 0x10, 0x9c, 0x47, 0x35, 0x6e, 0x7d, 0xb4, 0x25, 0x7b,
                                     0x5d, 0x74, 0xc7, 0x0b, 0x70, 0x95, 0x08]);

        assert_eq!(b.modpow(&e, &m), r);
    }
}
